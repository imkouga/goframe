// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package log implements a simple logging package. It defines a type, logger,
// with methods for formatting output. It also has a predefined 'standard'
// logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.
package loger

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"strings"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/01/23
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type logger struct {
	mu          sync.Mutex // ensures atomic writes; protects the following fields
	prefix      string     // prefix to write at beginning of each line
	clearPrefix string     // longfile clear common prefix string of each line
	flag        int        // properties
	out         io.Writer  // destination for output
	buf         []byte     // for accumulating text to write
	calldepth   int
}

// newLoger creates a new logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func newLoger(out io.Writer, prefix string, flag int, depth int) *logger {
	return &logger{out: out, prefix: prefix, flag: flag, calldepth: 2 + depth}
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *[]byte, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		*buf = append(*buf, '0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}
	*buf = append(*buf, b[bp:]...)
}

//
//func (l *logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
//	*buf = append(*buf, l.prefix...)
//	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
//		if l.flag&Ldate != 0 {
//			year, month, day := t.Date()
//			itoa(buf, year, 4)
//			*buf = append(*buf, '/')
//			itoa(buf, int(month), 2)
//			*buf = append(*buf, '/')
//			itoa(buf, day, 2)
//			*buf = append(*buf, ' ')
//		}
//		if l.flag&(Ltime|Lmicroseconds) != 0 {
//			hour, min, sec := t.Clock()
//			itoa(buf, hour, 2)
//			*buf = append(*buf, ':')
//			itoa(buf, min, 2)
//			*buf = append(*buf, ':')
//			itoa(buf, sec, 2)
//			if l.flag&Lmicroseconds != 0 {
//				*buf = append(*buf, '.')
//				itoa(buf, t.Nanosecond()/1e3, 6)
//			}
//			*buf = append(*buf, ' ')
//		}
//	}
//	if l.flag&(Lshortfile|Llongfile) != 0 {
//		if l.flag&Lshortfile != 0 {
//			short := file
//			for i := len(file) - 1; i > 0; i-- {
//				if file[i] == '/' {
//					short = file[i+1:]
//					break
//				}
//			}
//			file = short
//		}
//		*buf = append(*buf, file...)
//		*buf = append(*buf, ':')
//		itoa(buf, line, -1)
//		*buf = append(*buf, ": "...)
//	}
//}

func (l *logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}

	if len(l.clearPrefix) > 0 {
		inx := strings.Index(file, l.clearPrefix)
		if inx > 0 {
			inx += len(l.clearPrefix)
			if file[inx] == '/' {
				inx += 1
			}
			file = file[inx:]
		}
	}

	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *logger) Output(calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) > 0 && s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *logger) Printf(format string, v ...interface{}) {
	l.Output(l.calldepth, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *logger) Print(v ...interface{}) { l.Output(l.calldepth, fmt.Sprint(v...)) }

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *logger) Println(v ...interface{}) { l.Output(l.calldepth, fmt.Sprintln(v...)) }

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *logger) Fatal(v ...interface{}) {
	l.Output(l.calldepth, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *logger) Fatalf(format string, v ...interface{}) {
	l.Output(l.calldepth, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *logger) Fatalln(v ...interface{}) {
	l.Output(l.calldepth, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *logger) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.Output(l.calldepth, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.Output(l.calldepth, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *logger) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.Output(l.calldepth, s)
	panic(s)
}

// Flags returns the output flags for the logger.
func (l *logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}
